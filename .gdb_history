n
n
n
p (char)6d
p (char)6dh
p (char)0x6d
x/5cb ($rbp-0x18)
x/5cb $rbp
x/5cb $rbp+1
x/5cb ($rbp+1)
x/5cb ($rbp-1)
x/5cb ($rbp-2)
x/5cb ($rbp+18)
x/5cb ($rbp+0x18)
x/5cb ($rbp-0x18)
x/5cb ($rbp+0x18)
x/5cb ($rbp+0x18)
n
x/5cb ($rbp-0x18)
x/5cb -0x12(%rbp,%rax,1)
x/5cb [-0x12(%rbp,%rax,1)]
x/5cb $rbp+$rax+1-0x12
n
x20cb $rbp+$rax-0x18
x/20cb $rbp+$rax-0x18
x/20cb $rbp+$rax-0x12
x/20cb $rbp+$rax+1-0x12
x/20cb $rbp+1-0x12
x/20cb $rbp-0x12
x/20cb $rbp-0x0d
x/5cb $rbp-0x0d
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
start
x/5cb $fs:0x28
x/5cb $fs+0x28
x/5cb [$fs:0x28]
p/5cb [$fs:0x28]
p/cb [$fs:0x28]
p [$fs:0x28]
p $fs:0x28
x $rbp-8
x/5cb $fs*16+0x28
x/5cb $fs
n
printf("%c%c%c%c%c",0x69,0x63,0x61,0x42,0x63)
printf("%c",0x69)
printf
h printf
printf "%c%c%c%c%c",0x69,0x63,0x61,0x42,0x63
printf "%c%c%c%c%c",0x63,0x69,0x63,0x61,0x42
x/10cb $rbp-0x12
n
x/10cb $rbp-0x12
n
x/10cb $rbp-0x12
n
x/c $rbp-0x18
n
n
n
n
n
n
n
n
n
n
n
n
n
n
nq
q
start < test.txt 
n
b 47
c
x tree_node_list
x tree_node_list[0]
p tree_node_list[0]
p *tree_node_list[0]
n
n
p *tree_node_list[0]
q
c
q
start
s
s
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
s
dashboard expressions watch hash_table 
p hash_table[51]
p hash_table[51]->name
p hash_table[51]->next->name 
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
s
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
h
apropos message
h dashboard 
h dashboard -output
dashboard -layout 
apropos stdout
apropos stdin
apropos output
apropos console
h dprintf
start
dprintf 18 "%s: %s\n", node_p->name, node_p->definition
h dprintf
dprintf 18, "%s: %s\n" node_p->name, node_p->definition
c
q
h user-defined 
h function
help var
help variable
h 
h user-defined 
h define
document 
document print_list
h document
define print_list
document print_list
end
end
document print_list
documentation print_list
end
end
h data
h set var
h define
define print_list $arg0
set var p = $arg0
start
define print_list $arg0
h define
define print_list $arg1
define print_list
set var p = $arg1
for (p = $arg1; p != NULL; p = p->next)
printf "%s: %s\n", p->name, p->definition
end
print_list hash_table[0]
define plist]
define plist
set var $p = $arg0
while $n
printf "%d", $n->name
set var $n = $n->next
end
end
b 40
c
plist hash_table[50]
printf "%s\n" hash_table[50]->name
printf "%s\n", hash_table[50]->name
printf "%s\n", hash_table[50]
printf "%s\n", hash_table[50]->name
printf "%s\n", node_p->name
define plist
set $p = $arg0
while $p != NULL
printf "%s\n", $p->name
set $p = $p->next
end
end
plist node_p
define plist
set $p = $arg0
while $p
printf "%s\n", $p->name
set $p = $p->next
end
end
plist node_p
p hash_table[51]
plist hash_table[51]
which fd
q
