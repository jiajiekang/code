start
start < test.c
stepi
dashboard assembly -output
dashboard assembly -style 
s
s
q
q
start < test.c 
:q
q
start < test.c 
dashboard assembly 
dashboard assembly scroll 
dashboard assembly scroll 
q
layout asm
n
stepi
q
start < test.c 
n
n
p (char)c
n
h watch
h if
n
dashboard expressions watch (char)c
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
b 16
c
delete 
b 17
c
c
c
c
c
c
c
c
c
q
q
start < test.c 
n
q
start
si
q
start < test.c 
n
f
finish
g 18
until 
n
u
n
u
u
until 
n
n
until
until 
n
until
jump 42
q
start
 q
start <file_in.txt >file_out.txt 
n
dashboard expressions watch (char)c
n
n
n
b 143
b 14
c
n
c
n
n
c
n
exit
start <file_in.txt 
start <file_in.txt 
q
start <main.c
n
start <main.c
s
n
s
b 48
n
c
n
start <main.c
n
n
s
n
b 49
c
c
start <main.c
n
n
s
n
b 50
dashboard expressions watch str[i]
c
c
c
c
c
c
c
c
c
c
c
c
d 50
d 7
b 50 if str[i] = '/'
c
n
dashboard expressions watch str[i+1]
c
c
c
c
c
c
c
c
c
c
c
c
cc
c
c
c
c
start <main.c 
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
d 8
break 50 if str[i] == '/'
c
n
q
start
n
s
n
dashboard expressions watch str2[k]
dashboard expressions watch str1[i]
dashboard expressions watch str1[j]
n
 q
start
n
n
n
p/x x
call printf(BYTE_TO_BINARY_PATTERN, BYTE_TO_BINARY(x));
call printf("hello\n")
call printf("hello\n");
call setbits(x, 2, 4, y)
p x
p y
define BYTE_TO_BINARY(x)
define BYTE_TO_BINARY
end
BYTE_TO_BINARY 
define BYTE_TO_BINARY
hello
end
BYTE_TO_BINARY 
exit
start
n
call BYTE_TO_BINARY(x)
exit
list main
info macro BYTE_TO_BINARY
start
n
n
macro expand BYTE_TO_BINARY(x)
printf(BYTE_TO_BINARY_PATTERN, BYTE_TO_BINARY(x));
call printf(BYTE_TO_BINARY_PATTERN, BYTE_TO_BINARY(x));
call printf(BYTE_TO_BINARY_PATTERN, BYTE_TO_BINARY(x))
exit
start <input.txt 
n
b 46
c
n
b11
b 11
c
q
